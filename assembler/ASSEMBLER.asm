;---------------------------------------------------------
;Coded by Sergey Roiz on 25th of March 2002	
;---------------------------------------------------------
	.model small
	.stack 100h
	.data
;---------------------------------------------------------
palette     label   byte
	i=0
	rept    8
	db      0, 0, i*2
	i=i+1
endm
	i=0
	rept    8
	db      i*2, 0, 16-2*i
	i=i+1
endm
	i=0
	rept    16
	db      16+47*i/16, 0, 0
	i=i+1
endm
	i=0
	rept    48
	db      63, 21*i/16, 0
	i=i+1
endm
	i=0
	rept    48
	db      63, 63, 21*i/24
	i=i+1
endm
	db      179*3	dup(63)
;--------------------------------------------------------
clean_frame	segment	byte
c_buf		db	320*200	dup(0)	;screen buffer
		ends
;--------------------------------------------------------
prior_frame	segment	byte
p_buf		db	320*200 dup(0)	;preliminary buffer
		ends
;--------------------------------------------------------
image_frame	segment	byte
i_buf  dw      52201, 52230, 52231, 52232, 52233, 52234, 52235, 52236, 52237, 52238, 52260, 52261, 52262, 52263, 52264, 52265, 52266, 52267, 52268, 52283, 52284, 52285, 52286, 52287, 52288
  dw      52289, 52290, 52291, 52292, 52293, 52294, 52295, 52296, 52297, 52298, 52299, 52300, 52301, 52302, 52303, 52304, 52305, 52312, 52338, 52346, 52347, 52348, 52349, 52350, 52351
  dw      52352, 52353, 52354, 52355, 52356, 52357, 52369, 52397, 52398, 52399, 52400, 52401, 52402, 52403, 52404, 52405, 52406, 52407, 52408, 52409, 52410, 52411, 52412, 52413, 52414
  dw      52415, 52416, 52417, 52418, 52419, 52426, 52427, 52428, 52429, 52430, 52431, 52432, 52433, 52434, 52435, 52436, 52437, 52438, 52439, 52440, 52441, 52442, 52520, 52521, 52546
  dw      52547, 52548, 52549, 52559, 52560, 52561, 52576, 52577, 52578, 52579, 52589, 52590, 52591, 52603, 52632, 52633, 52657, 52658, 52666, 52677, 52678, 52679, 52689, 52717, 52746
  dw      52762, 52763, 52764, 52839, 52841, 52864, 52865, 52881, 52882, 52894, 52895, 52911, 52912, 52923, 52952, 52953, 52976, 52978, 52986, 52999, 53000, 53009, 53037, 53066, 53084
  dw      53085, 53158, 53161, 53183, 53203, 53213, 53233, 53242, 53271, 53274, 53295, 53297, 53305, 53320, 53328, 53356, 53385, 53405, 53406, 53477, 53481, 53501, 53502, 53524, 53531
  dw      53532, 53554, 53562, 53591, 53594, 53613, 53614, 53617, 53625, 53641, 53648, 53676, 53705, 53726, 53796, 53802, 53820, 53821, 53845, 53850, 53851, 53875, 53882, 53911, 53915
  dw      53932, 53937, 53945, 53961, 53968, 53996, 54025, 54046, 54047, 54115, 54122, 54140, 54165, 54170, 54195, 54201, 54230, 54235, 54251, 54256, 54264, 54281, 54287, 54315, 54344
  dw      54367, 54434, 54442, 54459, 54489, 54521, 54550, 54556, 54570, 54576, 54584, 54601, 54607, 54635, 54664, 54687, 54754, 54762, 54779, 54809, 54841, 54870, 54876, 54889, 54896
  dw      54904, 54921, 54927, 54955, 54984, 55006, 55007, 55073, 55082, 55098, 55128, 55160, 55189, 55197, 55208, 55215, 55223, 55240, 55246, 55274, 55303, 55326, 55392, 55403, 55418
  dw      55448, 55480, 55509, 55517, 55527, 55535, 55543, 55560, 55566, 55594, 55623, 55646, 55711, 55723, 55738, 55768, 55800, 55829, 55837, 55846, 55855, 55863, 55879, 55886, 55914
  dw      55943, 55966, 56030, 56043, 56058, 56088, 56119, 56148, 56158, 56165, 56174, 56182, 56199, 56205, 56233, 56262, 56285, 56349, 56363, 56378, 56379, 56408, 56409, 56439, 56468
  dw      56478, 56483, 56484, 56494, 56502, 56518, 56525, 56553, 56582, 56605, 56668, 56683, 56699, 56729, 56759, 56788, 56799, 56802, 56814, 56822, 56837, 56845, 56873, 56902, 56924
  dw      56988, 57004, 57020, 57021, 57050, 57051, 57078, 57107, 57119, 57121, 57133, 57141, 57155, 57156, 57164, 57192, 57221, 57243, 57307, 57324, 57342, 57343, 57344, 57372, 57373
  dw      57374, 57398, 57427, 57440, 57453, 57461, 57473, 57474, 57484, 57512, 57541, 57562, 57626, 57644, 57665, 57666, 57667, 57668, 57669, 57670, 57671, 57695, 57696, 57697, 57698
  dw      57699, 57700, 57701, 57718, 57747, 57773, 57777, 57778, 57779, 57780, 57781, 57782, 57783, 57784, 57785, 57786, 57787, 57788, 57789, 57790, 57791, 57792, 57804, 57832, 57861
  dw      57881, 57945, 57964, 57992, 57993, 57994, 57995, 58022, 58023, 58024, 58025, 58037, 58066, 58092, 58100, 58112, 58123, 58151, 58180, 58199, 58200, 58264, 58284, 58316, 58346
  dw      58357, 58386, 58412, 58420, 58433, 58443, 58471, 58500, 58516, 58517, 58518, 58583, 58605, 58637, 58667, 58677, 58706, 58732, 58740, 58754, 58763, 58791, 58820, 58827, 58828
  dw      58829, 58830, 58831, 58832, 58833, 58834, 58835, 58903, 58925, 58958, 58988, 58996, 59025, 59051, 59059, 59074, 59082, 59110, 59139, 59148, 59218, 59219, 59220, 59221, 59222
  dw      59223, 59224, 59225, 59226, 59227, 59228, 59229, 59230, 59231, 59232, 59233, 59234, 59235, 59236, 59237, 59238, 59239, 59240, 59241, 59242, 59243, 59244, 59245, 59278, 59308
  dw      59312, 59313, 59314, 59315, 59316, 59317, 59318, 59319, 59320, 59321, 59322, 59323, 59324, 59325, 59326, 59327, 59328, 59329, 59330, 59331, 59332, 59333, 59334, 59335, 59336
  dw      59337, 59338, 59339, 59345, 59371, 59379, 59394, 59402, 59426, 59427, 59428, 59429, 59430, 59431, 59432, 59433, 59434, 59435, 59436, 59437, 59438, 59439, 59440, 59441, 59442
  dw      59443, 59444, 59445, 59446, 59447, 59448, 59449, 59450, 59451, 59452, 59453, 59459, 59469, 59541, 59565, 59598, 59628, 59636, 59665, 59691, 59699, 59714, 59722, 59750, 59779
  dw      59790, 59860, 59885, 59917, 59947, 59955, 59984, 60010, 60018, 60033, 60041, 60069, 60098, 60111, 60112, 60179, 60205, 60237, 60267, 60275, 60304, 60330, 60338, 60353, 60361
  dw      60389, 60418, 60433, 60499, 60526, 60556, 60557, 60586, 60587, 60595, 60624, 60650, 60658, 60673, 60681, 60709, 60738, 60754, 60818, 60846, 60876, 60906, 60914, 60943, 60969
  dw      60977, 60992, 61000, 61028, 61057, 61075, 61137, 61166, 61175, 61195, 61205, 61225, 61234, 61263, 61289, 61297, 61311, 61312, 61320, 61348, 61377, 61396, 61397, 61456, 61486
  dw      61495, 61513, 61514, 61525, 61543, 61544, 61554, 61583, 61609, 61617, 61630, 61631, 61640, 61668, 61697, 61718, 61775, 61806, 61816, 61817, 61832, 61833, 61846, 61847, 61862
  dw      61863, 61874, 61903, 61929, 61937, 61949, 61950, 61960, 61988, 62017, 62039, 62094, 62127, 62138, 62139, 62149, 62150, 62151, 62168, 62169, 62179, 62180, 62181, 62193, 62222
  dw      62248, 62256, 62267, 62268, 62279, 62307, 62336, 62360, 62414, 62447, 62460, 62461, 62462, 62463, 62464, 62465, 62466, 62467, 62468, 62490, 62491, 62492, 62493, 62494, 62495
  dw      62496, 62497, 62498, 62513, 62514, 62515, 62516, 62517, 62518, 62519, 62520, 62521, 62522, 62523, 62524, 62525, 62526, 62527, 62528, 62529, 62530, 62531, 62532, 62533, 62534
  dw      62535, 62542, 62568, 62576, 62577, 62578, 62579, 62580, 62581, 62582, 62583, 62584, 62585, 62586, 62599, 62600, 62601, 62602, 62603, 62604, 62605, 62606, 62607, 62608, 62609
  dw      62610, 62611, 62612, 62613, 62614, 62615, 62616, 62617, 62618, 62619, 62620, 62621, 62627, 62628, 62629, 62630, 62631, 62632, 62633, 62634, 62635, 62636, 62637, 62638, 62639
  dw      62640, 62641, 62642, 62643, 62644, 62645, 62646, 62647, 62648, 62649, 62656, 62681, 62682
		ends
;--------------------------------------------------------
img_size	equ	1676
seed		dw	1
;--------------------------------------------------------
exit_msg	db	" Coded by Sergey Roiz on 25th of March 2002", 13, 10
		db	" e-mail: flameasm@yandex.ru", 13, 10, '$'
;--------------------------------------------------------
		.code
		.386	;for shl reg, n, where n > 1
start:
;-------set 640*480*256 video mode-----------------------
	mov ax, 4F02h
	mov bx, 0101h
	int 10h
;-------set new palette----------------------------------
	mov ax, @data               
	mov ds, ax
	mov dx, 03C8h
	xor al,al
	out dx,al
	inc dx
	mov cx, 256*3
	mov si, offset palette
set_pal:
	mov al, [si]
	out dx, al
	inc si
	dec cx
	jnz set_pal
;-------get seed-----------------------------------------
	mov ax, 0040h
	mov es, ax
	mov ax, es:[006Ch]
	mov seed, ax
;-------while not esc pressed----------------------------
main:
;-------prepare-segment-registers------------------------
	mov ax, image_frame
	mov ds, ax
	mov ax, prior_frame
	mov es, ax
;-------generate-one-bar-of-fire-------------------------
	mov bx, img_size
gen_bar:
;-------random-to-ax-and-save-to-seed--------------------
	push bx
	mov ax, seed
	mov cx, 8
new_bit:
	mov bx, ax
	and bx, 002Dh
	xor bh, bl
	clc
	jpe shift
	stc
shift:	rcr ax, 1
	dec cx
	jnz new_bit
	mov seed, ax
	pop bx
;--------------------------------------------------------
	mov di, [bx]
	stosb
	sub bx, 2
	jnz gen_bar
;-------horizintal-bluring-of-fire----------------------- 
	mov ax, prior_frame
	mov ds, ax
	mov si, 320*200
	xor bx, bx
h_blur:
	xor ax, ax
	add al, [si]
	adc ah, bl
	add al, [si-1]
	adc ah, bl
	add bl, [si+1]
	adc ah, bl
	add bl, [si+2]
	adc ah, bl
	shr ax, 3
	mov [si], al
	dec di
	jnz h_blur
;-------blur fire----------------------------------------
	mov si, 321
	mov cx, 320*198-2      
	xor bx, bx
blur_fire:
	xor     ax, ax
	add     al, [si+321]
	adc     ah, bl
	add     al, [si+319]
	adc     ah, bl
	add     al, [si-1]
	adc     ah, bl
	add     al, [si+1]
	adc     ah, bl
	ifdef   eight
	add     al, [si-321]
	adc     ah, bl
	add     al, [si+321]
	adc     ah, bl
	add     al, [si-319]
	adc     ah, bl
	add     al, [si+319]
	adc     ah, bl
	shr     ax, 3
	else
	shr     ax, 2
	endif
	test ax, ax
	jz skip
	dec     al
skip:
	mov     [si-320], al
	inc     si
	dec     cx
	jnz blur_fire    
;--------------------------------------------------------
	mov ax, clean_frame
	mov es, ax
	xor di, di
	mov ax, prior_frame
	mov ds, ax
	xor si, si
	mov cx, 320*100
	rep movsw

	mov bx, img_size
	mov ax, image_frame
	mov ds, ax
fill:
	mov di, [bx]
;	sub di, 920
	mov byte ptr es:[di], 67
	sub bx, 2
	jnz fill
	
;-------pause--------------------------------------------
	mov dx, 5000
	mov ah, 86h
	int 15h
;-------wait retrace-------------------------------------
	mov dx, 03DAh
vrtl1:
	in al, dx
	test al, 8
	jnz vrtl1
vrtl2:
	in al, dx
	test al, 8
	jnz vrtl2
;-------swap_buffers-------------------------------------
	mov ax, 4F05h
	xor bx, bx
	mov dx, 1
	int 10h

	mov ax, 0A000h
	mov es, ax
	mov ax, clean_frame
	mov ds, ax
	xor si, si

	mov cx, 20800
	xor bx, bx
	mov di, 24224
second_bank:
	mov al, ds:[si]
	mov es:[di], al
	inc bx
	cmp bx, 320
	jnz skip1
 	xor bx, bx
	add di, 320
skip1:
	inc si
	inc di
	dec cx
	jnz second_bank

	mov ax, 4F05h
	xor bx, bx
	mov dx, 2
	int 10h

	mov cx, 32640
	xor bx, bx
	mov di, 288
third_bank:
	mov al, ds:[si]
	mov es:[di], al
	inc bx
	cmp bx, 320
	jnz skip2
 	xor bx, bx
	add di, 320
skip2:
	inc si
	inc di
	dec cx
	jnz third_bank

	mov ax, 4F05h
	xor bx, bx
	mov dx, 3
	int 10h

	mov cx, 10676
	xor bx, bx
	mov di, 32
fourth_bank:
	mov al, ds:[si]
	mov es:[di], al
	inc bx
	cmp bx, 320
	jnz skip3
 	xor bx, bx
	add di, 320
skip3:
	inc si
	inc di
	dec cx
	jnz fourth_bank
;-------check if last key was esc------------------------
	in al, 60h
	cmp al, 81h
	jnz main
;-------return to text video mode------------------------
	mov ax, 0003h
	int 10h
;-------print exit message-------------------------------
	mov ax, dgroup	
	mov ds, ax
	mov ah, 9
	mov dx, offset exit_msg
	int 21h
;-------exit to dos--------------------------------------
	mov ax, 4C00h
	int 21h
end start
 